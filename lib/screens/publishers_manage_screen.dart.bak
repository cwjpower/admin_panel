import 'package:flutter/material.dart';
import '../services/admin_api_service.dart';
import 'publisher_detail_screen.dart';  // 👈 추가!

class PublishersManageScreen extends StatefulWidget {
  const PublishersManageScreen({Key? key}) : super(key: key);

  @override
  State<PublishersManageScreen> createState() => _PublishersManageScreenState();
}

class _PublishersManageScreenState extends State<PublishersManageScreen> {
  List<Map<String, dynamic>> _publishers = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadPublishers();
  }

  Future<void> _loadPublishers() async {
    setState(() => _isLoading = true);

    try {
      final response = await AdminApiService.getPublishersList();

      if (response['code'] == 0) {
        setState(() {
          _publishers = List<Map<String, dynamic>>.from(response['data'] ?? []);
          _isLoading = false;
        });
      } else {
        _showError(response['msg'] ?? '출판사 목록을 불러올 수 없습니다');
        setState(() => _isLoading = false);
      }
    } catch (e) {
      _showError('오류: $e');
      setState(() => _isLoading = false);
    }
  }

  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), backgroundColor: Colors.red),
    );
  }

  void _showAddPublisherDialog() {
    showDialog(
      context: context,
      builder: (context) => const AddPublisherDialog(),
    ).then((result) {
      if (result == true) {
        _loadPublishers();
      }
    });
  }

  Future<void> _togglePublisherStatus(Map<String, dynamic> publisher) async {
    final newStatus = publisher['status'] == 'active' ? 'suspended' : 'active';

    try {
      final response = await AdminApiService.updatePublisherStatus(
        publisherId: publisher['publisher_id'],
        status: newStatus,
      );

      if (response['code'] == 0) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('출판사 상태가 변경되었습니다'),
            backgroundColor: Colors.green,
          ),
        );
        _loadPublishers();
      } else {
        _showError(response['msg'] ?? '상태 변경 실패');
      }
    } catch (e) {
      _showError('오류: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
        children: [
          // 헤더
          Container(
            padding: const EdgeInsets.all(20),
            child: Row(
              children: [
                const Text(
                  '출판사 관리',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(width: 16),
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 6,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.purple.shade100,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '총 ${_publishers.length}개',
                    style: TextStyle(
                      color: Colors.purple.shade700,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                const Spacer(),
                ElevatedButton.icon(
                  onPressed: _showAddPublisherDialog,
                  icon: const Icon(Icons.add),
                  label: const Text('출판사 추가'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red.shade700,
                    foregroundColor: Colors.white,
                  ),
                ),
              ],
            ),
          ),

          // 출판사 목록
          Expanded(
            child: _publishers.isEmpty
                ? const Center(child: Text('등록된 출판사가 없습니다'))
                : ListView.builder(
              padding: const EdgeInsets.all(20),
              itemCount: _publishers.length,
              itemBuilder: (context, index) {
                final publisher = _publishers[index];
                return _buildPublisherCard(publisher);
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPublisherCard(Map<String, dynamic> publisher) {
    final isActive = publisher['status'] == 'active';

    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: InkWell(  // 👈 InkWell로 감싸기!
        onTap: () {
          // 상세 화면으로 이동
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => PublisherDetailScreen(publisher: publisher),
            ),
          );
        },
        child: ListTile(
          leading: CircleAvatar(
            backgroundColor: isActive ? Colors.green.shade100 : Colors.grey.shade300,
            child: Icon(
              Icons.business,
              color: isActive ? Colors.green.shade700 : Colors.grey.shade600,
            ),
          ),
          title: Row(
            children: [
              Text(
                publisher['publisher_name'] ?? '',
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(width: 8),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: isActive ? Colors.green.shade100 : Colors.grey.shade200,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  isActive ? '활성' : '비활성',
                  style: TextStyle(
                    fontSize: 11,
                    color: isActive ? Colors.green.shade700 : Colors.grey.shade700,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          subtitle: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 4),
              Text('코드: ${publisher['publisher_code'] ?? ''}'),
              Text('등록일: ${publisher['created_at'] ?? ''}'),
            ],
          ),
          trailing: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              IconButton(
                icon: Icon(
                  isActive ? Icons.block : Icons.check_circle,
                  color: isActive ? Colors.orange : Colors.green,
                ),
                onPressed: () => _togglePublisherStatus(publisher),
                tooltip: isActive ? '비활성화' : '활성화',
              ),
              IconButton(
                icon: const Icon(Icons.edit, color: Colors.blue),
                onPressed: () {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('편집 기능 준비 중')),
                  );
                },
                tooltip: '편집',
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// ========================================
// 출판사 추가 다이얼로그
// ========================================

class AddPublisherDialog extends StatefulWidget {
  const AddPublisherDialog({Key? key}) : super(key: key);

  @override
  State<AddPublisherDialog> createState() => _AddPublisherDialogState();
}

class _AddPublisherDialogState extends State<AddPublisherDialog> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _codeController = TextEditingController();
  bool _isLoading = false;

  @override
  void dispose() {
    _nameController.dispose();
    _codeController.dispose();
    super.dispose();
  }

  Future<void> _submit() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final response = await AdminApiService.addPublisher(
        publisherName: _nameController.text,
        publisherCode: _codeController.text.toUpperCase(),
      );

      if (response['code'] == 0) {
        if (mounted) {
          Navigator.pop(context, true);
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('출판사가 추가되었습니다'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } else {
        _showError(response['msg'] ?? '출판사 추가 실패');
      }
    } catch (e) {
      _showError('오류: $e');
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), backgroundColor: Colors.red),
    );
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('출판사 추가'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: '출판사명 *',
                  hintText: '예: Marvel Comics',
                ),
                validator: (v) => v?.isEmpty ?? true ? '필수 입력' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _codeController,
                decoration: const InputDecoration(
                  labelText: '출판사 코드 *',
                  hintText: '예: MARVEL (영문 대문자)',
                ),
                validator: (v) {
                  if (v?.isEmpty ?? true) return '필수 입력';
                  if (!RegExp(r'^[A-Z]+$').hasMatch(v!.toUpperCase())) {
                    return '영문 대문자만 입력 가능';
                  }
                  return null;
                },
                onChanged: (v) {
                  _codeController.value = _codeController.value.copyWith(
                    text: v.toUpperCase(),
                    selection: TextSelection.collapsed(offset: v.length),
                  );
                },
              ),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.shade50,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    Icon(Icons.info_outline, color: Colors.blue.shade700, size: 20),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        '출판사 코드는 중복될 수 없습니다',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.blue.shade900,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: _isLoading ? null : () => Navigator.pop(context),
          child: const Text('취소'),
        ),
        ElevatedButton(
          onPressed: _isLoading ? null : _submit,
          child: _isLoading
              ? const SizedBox(
            width: 16,
            height: 16,
            child: CircularProgressIndicator(strokeWidth: 2),
          )
              : const Text('추가'),
        ),
      ],
    );
  }
}